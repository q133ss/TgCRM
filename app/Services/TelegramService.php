<?php

namespace App\Services;

use App\Models\User;
use Carbon\Carbon;

class TelegramService
{
    public function processMessage($message, User $user)
    {
        $taskService = new TaskService();
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $caption = $message['caption'] ?? '';
        $entities = $message['entities'] ?? [];
        $voice = $message['voice'] ?? null;
        $document = $message['document'] ?? null;
        $photo = $message['photo'] ?? null;

        $project = $taskService->checkCreateProject($chatId, $user, false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º
        $isGroupChat = $message['chat']['type'] === 'group' || $message['chat']['type'] === 'supergroup';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        $botMentioned = false;
        $mentionedUsers = [];

        foreach ($entities as $entity) {
            if ($entity['type'] === 'mention') {
                $mentionedUsername = substr($text, $entity['offset'], $entity['length']);
                if ($mentionedUsername === config('services.telegram.username')) {
                    $botMentioned = true;
                } else {
                    $mentionedUsers[] = $mentionedUsername;
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (isset($entities[0]) && $entities[0]['type'] === 'bot_command') {
            $command = substr($text, 0, strpos($text, ' ') ?: strlen($text)); // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É

            switch ($command) {
                case '/start':
                    $this->handleStartCommand($chatId);
                    return;
                case '/tasks':
                    $this->handleTasksCommand($chatId, $user, $project);
                    return;
                case '/help':
                    $this->handleHelpCommand($chatId);
                    return;
            }
        }

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if (!$isGroupChat) {
            if ($voice) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                $this->voiceTask($chatId, $voice, $user, $project);
            } elseif ((isset($document) && !empty($document)) || (isset($photo) && !empty($photo))) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º caption, –µ—Å–ª–∏ text –ø—É—Å—Ç–æ–π
                $description = !empty($text) ? $text : $caption;

                if (empty($description)) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è
                    $this->sendMessage($chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª—É.');
                } else {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç/–æ–ø–∏—Å–∞–Ω–∏–µ
                    $this->createTaskWithFiles($chatId, $description, $user, $project, $document ?? end($photo));
                }
            } elseif ($text) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                $files = [];
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
                if (isset($message['document'])) {
                    $files[] = $message['document'];
                }
                if (isset($message['photo'])) {
                    $files[] = end($message['photo']); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
                }
                // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                $taskService->create($chatId, $text, $user, $project, $files);
            }
        }
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        elseif ($isGroupChat && $botMentioned) {
            if ($voice) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
                $this->recognizeSpeech($chatId, $voice);
            } elseif (($document || $photo) && !$text) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                $this->sendMessage($chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª—É.');
            } elseif (($document || $photo) && $text) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç
                $this->createTaskFromGroupWithFiles($chatId, $text, $document ?? $photo);
            } elseif ($text) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
                $this->createTaskFromGroup($chatId, $text, $mentionedUsers, $user, $project);
            }
        }

        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        if ($isGroupChat && isset($message['new_chat_members'])) {
            foreach ($message['new_chat_members'] as $member) {
                if ($member['id'] == config('services.telegram.id')) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω–∞—à –±–æ—Ç
                    $this->sendMessage($message['chat']['id'], '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —ç—Ç–æ—Ç —á–∞—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.');
                    return;
                }
            }
        }
    }
    public function sendMessage($chatId, $text, $keyboard = [])
    {
        $token = config('services.telegram.token');
        $url = "https://api.telegram.org/bot$token/sendMessage";

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
        ];

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤ $keyboard, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ InlineKeyboard
        if (!empty($keyboard)) {
            $data['reply_markup'] = json_encode([
                'inline_keyboard' => $keyboard,
            ]);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API
        file_get_contents($url, false, stream_context_create([
            'http' => [
                'method' => 'POST',
                'header' => 'Content-Type: application/json',
                'content' => json_encode($data),
            ],
        ]));
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≥—Ä—É–ø–ø—ã
    private function createTaskFromGroup($chatId, $text, $mentionedUsers, $user, $project)
    {
        $taskDescription = str_replace(config('services.telegram.username'), '', $text); // –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        $responsibles = [];
        if(!empty($mentionedUsers)){
            $users = User::whereIn('username', $mentionedUsers);
            $responsibles = $users->pluck('id')->all();

            $existingUsers = $users->pluck('username')->all();
            $nonExistingUsers = array_diff($mentionedUsers, $existingUsers);
            $mentionedUsernames = implode(', ', $mentionedUsers);
        }

        if(!empty($nonExistingUsers)) {
            $keyboard = [
                [
                    [
                        'text' => '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
                        'url' => 'https://t.me/'.config('services.telegram.username').'?start=start_command'
                    ]
                ]
            ];
            $this->sendMessage($chatId, "–£–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: ".$mentionedUsernames, $keyboard);
        }else{
            (new TaskService())->make($chatId, $text, $user, $project, [], $responsibles);
            $this->sendMessage($chatId, "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: $taskDescription\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: $mentionedUsernames");
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ñ–∞–π–ª–∞–º–∏
    private function createTaskWithFiles($chatId, $text, $user, $project, $file)
    {
        (new TaskService())->create($chatId, $text, $user, $project,[$file]);
    }

    private function voiceTask($chatId, $voice, $user, $project)
    {
        $text = (new YandexService())->recognizeSpeech($chatId, $voice);
        if($text != null){
            (new TaskService())->create($chatId, $text, $user, $project);
        }
    }

    private function handleStartCommand($chatId){
        $botName = config('services.telegram.username');
        $this->sendMessage($chatId, "ü§ñ –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ ¬´ $botName ¬ª ‚Äî –≤–∞—à –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ —Ç—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á –¥–ª—è Telegram!

¬´ $botName ¬ª –ø–æ–º–æ–∂–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –ø—Ä—è–º–æ –∏–∑ —á–∞—Ç–æ–≤, –∞ —Ç–∞–∫–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º. ‚è∞

–í —Å–ª–µ–¥—É—é—â–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –º—ã –∫—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.

üìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /help –≤ –±–æ—Ç–µ.

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º! üí¨

–ù–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ ‚û°Ô∏è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ –±–æ—Ç–µ.");
    }

    private function handleTasksCommand($chatId, $user, $project)
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $tasks = (new TaskService())->getAllByProject($project, $user);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ
        $groupedTasks = (new TaskService())->groupTasksByDate($tasks);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $response = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n\n";

        // –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã
        if (!empty($groupedTasks['no_date'])) {
            $response .= "–ë–µ–∑ –¥–∞—Ç—ã:\n";
            foreach ($groupedTasks['no_date'] as $task) {
                $response .= "* {$task->title}\n";
            }
            $response .= "\n"; // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        }

        // –ó–∞–¥–∞—á–∏ —Å –¥–∞—Ç–æ–π
        ksort($groupedTasks); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ
        foreach ($groupedTasks as $date => $tasksForDate) {
            if ($date === 'no_date') {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É –±–µ–∑ –¥–∞—Ç—ã (–æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ)
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            $formattedDate = $date; //Carbon::parse($date)->format('d.m.Y');
            $response .= "$formattedDate:\n";

            foreach ($tasksForDate as $task) {
                $title = $task->title;

                $response .= "* {$title}\n";
            }

            $response .= "\n"; // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $this->sendMessage($chatId, $response);
    }
    private function handleHelpCommand($chatId){
        $botName = config('services.telegram.username');
        $this->sendMessage($chatId, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ¬´ $botName ¬ª –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ.
üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –≤ —á–∞—Ç–µ $botName ‚Äì —Ç–∞–º –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.");
    }
}
